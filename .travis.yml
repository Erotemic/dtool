env:
    global:
        - secure: "q93WdJqba4I5rPzGeawjBP99qXuzgr9prKRWyf7AI2hPU7h0q0G3R4QeIbLwuCumFgx7UM4jAkKuBPxP2r1XDpP/uAoCT7lE+JPcoxylArgvSDUDQvep/JaAErCAVgE1I5upt/teFOVwvW5i2wx/MRONRa8aVP+SVZ22Ao4O+4dNZZv3RsZ4SKcan2VO1I9aRKR9FDvwzhoSMFdRYc6t8YFCSTUUg8uWE0rSazROKGFRtKctkMOpJ3wyA81CtrZ07Hzo98NQIGFvaEt0fkv/UpAcNPtiMTHQaGcr97WVd/+iZ51Iq/JK5m+PuBM6yD44Fmjjc0w0ZZGaG6YWZiUPFaMD4SzinfWNsNQ0gysVIZnVTMXpm7rpI91Njmou3aP64YLGJhiCe6qf4PiWSuowBh+1ra77r1DJ5ydI+03j9ah2x9KeRaVGpS9paZm4igrtw+1c/2cHcwxgcscks1+ESv9eKoycSaZTAwvJxP2VwNg2g4Qb3jEWBVtBQ5lI05z+WDHsptTYLouqEvwyRGHTQyR1cGU7Utt3dcu8+QtbXgU1bzWYMGS9/J1fcy1FNCgBNYyQFRl5zH9109x+Il9rkuEkbklp6jBYbPHXMez1NuHbB6L8/86eubjYkQuHJgKIRx3mRWow3hOQo6SCBQhyGmITBhfIv+R3HnKbyyxDn8k="
        - secure: "ZUfOjZW4jKposSbr+A5A5mP4Z6yO9Yu6YUxD+dAgtzoeU+ildrBRsCRmhCVW4jcKbPd2lCXGGYwSqx3W1szXXg5Ee1k+k8v/AcOv9M0+4l7hRycVLdBXLWpeRao/+9PfBToGAorhyEzkziwRHVyf0gwayXxS6QabDxS/DnkX3WwLafT85NSDC81uTC/zukGCoc9sxrV9c7m5/0vvEGnwcEfd/Yzhfqpku7b19CKLpXhOPyJdsXywGRWDHAZPPS1esRdxvmC7Hv9wotg52JqQxFHPCdPRkY3Q5DG0nfiUjZZNuXolgIuRz/bNANk7QTqSXdE33FRIq3Yh4MX2pA90j8+lYNmJ2lmfUv2Grp7peCtZ5NZB7YKx6hArSaWk8R2PIoqGkSJ39I6eY9VDsPz1tIgtDJTcENg43sFwVBdshW+2daClyx6C3cH7ppr3LAi7aKxGfa3smefVjmhpIn5hqJ3D8psA99EwI8YyVbzIpTa15YLrzpmj7DfnJCAjDwVuZS7tH/XFSfUWShKDMCWGV7Gcv0lr+yRrAnl/+rLUS9fIYuHdOmTprRJhE0pVtJbuNnu9/pyI8Ac/MMFzV9h/A7FnsAEtzymwlr9ueQAaABFvBPv4ViF9GJ7vP2ujP3y/y2MSGA0V11/h8XpC5KMfSXEGQ1F/BOqAI7/cMW37hh0="
        - secure: "pk0amUvYJiTbLp7h93G74xGe+2mQSEh59ndHvsM+ISOrhnXvuGwED9tiz2vNzJA1pPMeflXQQeGR61Rx/iQDT6ySMTEWkX0LwgIvSyHC7SRXKGdFhSlDNriN1uUk2J19/xBJKwgsf+j/TF6ZaP4wHU6hGXiELmc/1dbkhGlFVi0u/If/kZ29tkOJfCooy09uOU8wOg8+cdX630/q4dP4+BN2BYt+5kwy6ucatY+d12iHQZcws2bnPSP/F87U0KvWbO3ziQgauFk1s4ouZmslbUCRPoG9TLRgUwbJX/p3u96qw4F2xOIrQidHvBhv5NNwD+MyxtatcTP8ibMBPja66srYIud69vzhRZWtN42MrANCSI/+qJvelDbmPfZGLoVRxI3fDXKZtc78Z7n/911sEEFwP7YvCW4/nTjO2pZPLoMS3CUz18bqtFjDfFAJlbLt9W1OId7i4mjUQ+84O6WqXsb6MepulWQDe+nUf3Kx9+ZSNVrg+TXRQ6AMqWPydnKUsIzckqEquVAZgKDCpRu4F8/T4fmY/uwJS3Xv5wCiizaG6cnAIUEkhuJLUeuEWIpCjJdUjO29DrABHZEBOnSlVFp8AW8hx0T2XaZSk2P2D+d6gcuP38EghiPb8cfVmf06pWouUS60AyzBrX1zUIUCQV8VsE9TdF4Gjvm7giWUohk="
        - secure: "ZcMMrG/xfMht6CQafVbb7IDEs6FscPOFbSTxYrz9FRqXPvIW4MPr4npjvYJcV/0xI72POOOdLN5wVEbJOgPI3vyZCScEJqAqHl1JiWFFPF0ou79tjYc3QlxXyGP9ZWNaJYVP5iwyZEEDyJR7vKccw+w9d/pRertpydsUJPzMBWd23/9DnhFSNK04FR7wOdC/8ZIzryR9bcOBvgU1wdqYbXt7BUCnpcymKV6sMIEXKkxg5NbQl6PIUte5l5hh5uaaPJ8eHGhJgxzFKWV42CfROglTrfTwtLFNO3EE1BcoJCHlPTkiMB5r6dkskr+cUUNVDELxAtiZ/Gm9VjFFbAMkYp9KaWczM7OH/Bzxex57wNUmutZDS94hrzRtmFc0oPqt7c+sc/SgFGQkkkuXvztANkKOYJidY44ANa1EYFe/WoQCqn9aw9rrYTRtWcsz/UwNNnb6bentOyTOnK0Xd4wD2IIHvs1SB9Tn/kUF3IQKpMuZX6qYJbxxcHps6vVzjx7Tt8eBgUEmG8IMxVgdiC7y4GfqK/llhpymAflnNDLTDW/Yz/LySrcXjIfXquBWBj2vPrEyx/I7RAo8ls6OaAVojZ+W2eNC016nj+wo+Em8+okq1JLdfh1H6/eKew1Mf7k64Ce0hTahf1SdHwdqesVVl8G9kG45JNdsSogNZu3fYAA="


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
.__heredoc__: &__heredoc__
    - | 
        __doc__="""
        ============
        TRAVIS-CI INSTRUCTIONS
        ============

        This file was designed to be used as a template. You can adapt it to
        new projects with a few simple changes.  Namely perform the following
        search and replaces.

        ```bash
        cat .travis.yml | \
            sed 's|dtool_ibeis|dtool_ibeis|g' | \
            sed 's|travis-ci-Erotemic|travis-ci-Erotemic|g' | \
            sed 's|CI_GITHUB_SECRET|CI_GITHUB_SECRET|g' | \
            sed 's|github.com/Erotemic|github.com/Erotemic|g' | \
        tee /tmp/repl && colordiff .travis.yml /tmp/repl
        ```

        To use this script you need the following configurations on your GitHub
        / TravisCI account.

        GITHUB SECRETS
        --------------

        Almost all of the stages in this pipeline can be performed on a local
        machine (making it much easier to debug) as well as the travis-ci
        machine. However, there are a handeful of required environment
        variables which will contain sensitive information. These variables are

        * TWINE_USERNAME - this is your pypi username
            twine info is only needed if you want to automatically publish to
            pypi

        * TWINE_PASSWORD - this is your pypi password 

        * CI_GITHUB_SECRET - We will use this as a secret key to
            encrypt/decrypt gpg secrets This is only needed if you want to
            automatically sign published wheels with a gpg key.

        * PERSONAL_GITHUB_PUSH_TOKEN - 
            This is only needed if you want to automatically git-tag release
            branches. This token is global to an entire account, so it only
            needs to be done once per user.

            To create this token go to:
            https://github.com/settings/tokens/new

            And create a token with "write:packages" checked. 
            Name (via the Note field) the token something like "github-push-token".
            Copy the value of that token and store it somewhere secure (like a
            secret environment file). 
            The environment variable should have the form:

            PERSONAL_GITHUB_PUSH_TOKEN="{token-name}:{token-password}"

            For instance it may look like this: 
            PERSONAL_GITHUB_PUSH_TOKEN=git-push-token:62zutpzqga6tvrhklkdjqm

        ENCRYPTING SECRETS
        ------------------
        The following script demonstrates how to securely encrypt a secret GPG
        key. It is assumed that you have a file secret_loader.sh that looks
        like this

        ```bash
            source secretfile
        ```

        and then a secretfile that looks like this
        ```bash
            #!/bin/bash
            echo /some/secret/file 

            export TWINE_USERNAME=<pypi-username>
            export TWINE_PASSWORD=<pypi-password>
            export CI_GITHUB_SECRET="<a-very-long-secret-string>"
            export PERSONAL_GITHUB_PUSH_TOKEN='git-push-token:<token-password>'
        ```

        You should also make a secret_unloader.sh that points to a script that
        unloads these secret variables from the environment.

        You will also need the travis CLI utility to encrypt your secrets. On
        Ubuntu these can be installed via

        ```bash
        sudo apt install ruby ruby-dev -y
        sudo gem install travis
        ```

        Given this file-structure setup, you can then run the following
        commands verbatim. Alternatively just populate the environment
        variables and run line-by-line without creating the secret
        loader/unloader scripts.

        ```bash
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET
        echo $PERSONAL_GITHUB_PUSH_TOKEN

        # In your repo directory run the command to ensure travis recognizes the repo
        # It will say: Detected repository as <user>/<repo>, is this correct? |yes|
        # Answer yes before running the encrypt commands.
        travis status

        # encrypt relevant travis variables (requires travis cli)
        SECURE_TWINE_USERNAME=$(travis encrypt --no-interactive TWINE_USERNAME=$TWINE_USERNAME)
        SECURE_TWINE_PASSWORD=$(travis encrypt --no-interactive TWINE_PASSWORD=$TWINE_PASSWORD)
        SECURE_CI_GITHUB_SECRET=$(travis encrypt --no-interactive CI_GITHUB_SECRET=$CI_GITHUB_SECRET)
        SECURE_PERSONAL_GITHUB_PUSH_TOKEN=$(travis encrypt --no-interactive PERSONAL_GITHUB_PUSH_TOKEN=$PERSONAL_GITHUB_PUSH_TOKEN)
        echo "
        Add the following lines to your .travis.yml

        env:
            global:
                - secure: $SECURE_TWINE_USERNAME
                - secure: $SECURE_TWINE_PASSWORD
                - secure: $SECURE_CI_GITHUB_SECRET
                - secure: $SECURE_PERSONAL_GITHUB_PUSH_TOKEN
        "

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with CI secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key
        ```

        TEST GIT_PUSH_TOKEN 
        -------------------
        To auto-tag a github hosted project we need to generate a personal
        access token with write access.

        First go to: 
        https://github.com/settings/tokens/new

        And create a token with "write:packages" checked. Name the token something like
        github-push-token
        copy that token and store it somewhere secure. 

        PERSONAL_GITHUB_PUSH_TOKEN=<token-name>:<secret-value>

        **If you did not add this encrypted variable as a secret**,
        then also go to your github project settings page and add a
        new secret variable named PERSONAL_GITHUB_PUSH_TOKEN with the
        secret value.

        <token-name>:<secret-value>

        for example: github-push-token:ffjdksajklfdsjak

        https://github.com/Erotemic/dtool_ibeis/settings/secrets
        
        # Also here
        https://travis-ci.org/github/Erotemic/xdoctest/settings

        # Test that this works in a docker image
        URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
        echo "URL_HOST = $URL_HOST"
        git config user.email "travis-ci@github.com"
        git config user.name "Travis-CI"
        git tag "test-tag-v5"
        git push --tags "https://${PERSONAL_GITHUB_PUSH_TOKEN}@${URL_HOST}"


        REFERENCES
        ----------

        https://stackoverflow.com/questions/51465858/how-do-you-push-to-a-gitlab-repo-using-a-gitlab-ci-job
        https://github.com/travis-ci/travis.rb
        https://docs.travis-ci.com/user/encrypting-files/
        
        """ # "  # hack for vim yml syntax highlighter
       
language: python
sudo: false

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
        - $HOME/gpg_install_prefix
        - $HOME/.cache/pip
        - $HOME/download

python:
  #- "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - travis_retry pip install -e .
    
script: 
  - travis_wait ./run_doctests.sh

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        # try and have travis cache this
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # This part of the script installs a newer version of GPG on the CI
            # machine so we can sign our releases.
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh

        # TODO: incorporate git tagging into release script 
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
            echo "URL_HOST = $URL_HOST"
            git config user.email "travis-ci@github.com"
            git config user.name "Travis-CI"
            VERSION=$(python -c "import setup; print(setup.VERSION)")
            git tag $VERSION -m "tarball tag $VERSION"
            git push --tags "https://${PERSONAL_GITHUB_PUSH_TOKEN}@${URL_HOST}"
        fi
